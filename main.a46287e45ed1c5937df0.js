!function(){"use strict";var e,n,r={809:function(e,n,r){r(613);const{createGameOfLife:t}=r(548),o=document.createElement("section"),i=document.createElement("section");document.body.appendChild(o),document.body.appendChild(i),t(7,7,o),t(12,12,i)},548:function(e,n,r){function t(e,n,r){const t=e[r];if(void 0===t)return 0;const o=t[n];return void 0===o?0:o}function o(e,n,r){let o=0;for(let i=e-1;i<=e+1;i+=1)o+=Number(t(r,i,n-1));for(let i=e-1;i<=e+1;i+=1)o+=Number(t(r,i,n+1));return o+=Number(t(r,e-1,n)),o+=Number(t(r,e+1,n)),o}function i(e,n,r){const t=`<table border=1>${n.map(((e,r)=>`<tr>${e.map(((e,t)=>{if(1===e){const e=o(t,r,n);return e<2||e>3?`<td \n          data-x=${t}\n          data-y=${r}\n          class="cell dying"></td>`:`<td \n        data-x=${t}\n        data-y=${r}\n        class="cell alive"></td>`}return`<td \n      data-x=${t}\n      data-y=${r}\n      class="cell dead"></td>`})).join("")}</tr>`)).join("")}</table>`;e.innerHTML=t,e.querySelector("table").addEventListener("click",(e=>{const n=e.target,t=n.getAttribute("data-x"),o=n.getAttribute("data-y");t&&o&&r(Number(t),Number(o))}))}function c(e,n,r){!function(e){e.innerHTML='\n   <div class="control">\n    <div class="input-box">\n      <label for="control-speed">Speed: </label>\n      <input class="control-speed" type="range" min="10" max="200" value="100" step="10">\n    </div>\n    <div class="input-box">\n     <label for="control-width">Width: </label>\n     <input class="input control-width" type="number" value="7" min="3">\n    </div>\n    <div class="input-box">\n     <label for="control-height">Height: </label>\n     <input class="input control-height" type="number" value="7" min="3">\n    </div>\n    <button class="button changeSizeBtn">Change size</button>\n  </div>\n  <div class="field-wrapper"></div>\n  <div class="playBtn-box"><button class="button playBtn">Start</button></div>\n  '}(r);const c=r.querySelector(".control-speed"),a=r.querySelector(".control-width"),d=r.querySelector(".control-height"),l=r.querySelector(".changeSizeBtn");!function(e,n,r,c,a,d,l,u,s,f){let p=100,h=Array.from({length:n}).map((()=>Array.from({length:e}).map((()=>0))));const v=(e,n)=>{h[n][e]=0===h[n][e]?1:0,i(r,h,v)};function m(){s=!1,d.innerHTML="Start",clearInterval(f)}function y(){h=function(e){return e.map(((n,r)=>n.map(((n,i)=>{const c=o(i,r,e),a=t(e,i,r);var d;return 3===(d=c)?1:d>3||d<2?0:2===d&&1===a?1:0}))))}(h),i(r,h,v),function(e){for(let n=0;n<e.length;n+=1){const r=e[n];for(let e=0;e<r.length;e+=1)if(r[e])return!0}return!1}(h)||(alert("Death on the block!"),m())}c.addEventListener("click",(()=>{const e=parseInt(l.value,10),n=parseInt(u.value,10);if(e>h[0].length)for(let n=0;n<h.length;n++)h[n].push(...new Array(e-h[n].length).fill(0));else if(e<h[0].length)for(let n=0;n<h.length;n++)h[n]=h[n].slice(0,e);if(n>h.length){const r=Array.from({length:n-h.length}).map((()=>new Array(e).fill(0)));h.push(...r)}else n<h.length&&(h=h.slice(0,n));i(r,h,v)})),i(r,h,v),d.addEventListener("click",(()=>{s?m():(s=!0,d.innerHTML="Stop",f=setInterval(y,p))})),a.addEventListener("input",(function(){p=parseInt(a.value,10),s&&(clearInterval(f),f=setInterval(y,p))}))}(e,n,r.querySelector(".field-wrapper"),l,c,r.querySelector(".playBtn"),a,d,!1,void 0)}r.r(n),r.d(n,{createGameOfLife:function(){return c}})},783:function(e,n,r){var t=r(618),o=Object.create(null),i="undefined"==typeof document,c=Array.prototype.forEach;function a(){}function d(e,n){if(!n){if(!e.href)return;n=e.href.split("?")[0]}if(u(n)&&!1!==e.isLoaded&&n&&n.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(n,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function l(){var e=document.querySelectorAll("link");c.call(e,(function(e){!0!==e.visited&&d(e)}))}function u(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,n){if(i)return console.log("no window.document found, will not HMR CSS"),a;var r,s,f=function(e){var n=o[e];if(!n){if(document.currentScript)n=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(n=i.src)}o[e]=n}return function(e){if(!n)return null;var r=n.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return t(n.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")))})):[n.replace(".js",".css")]}}(e);return r=function(){var e=f(n.filename),r=function(e){if(!e)return!1;var n=document.querySelectorAll("link"),r=!1;return c.call(n,(function(n){if(n.href){var o=function(e,n){var r;return e=t(e),n.some((function(t){e.indexOf(n)>-1&&(r=t)})),r}(n.href,e);u(o)&&!0!==n.visited&&o&&(d(n,o),r=!0)}})),r}(e);if(n.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void l();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),l())},50,s=0,function(){var e=this,n=arguments;clearTimeout(s),s=setTimeout((function(){return r.apply(e,n)}),50)}}},618:function(e){e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var n=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(n,"i"),"").split("/"),t=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",n+t+r.reduce((function(e,n){switch(n){case"..":e.pop();break;case".":break;default:e.push(n)}return e}),[]).join("/")}},613:function(e,n,r){var t=r(783)(e.id,{locals:!1});e.hot.dispose(t),e.hot.accept(void 0,t)}},t={};function o(e){var n=t[e];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var i=t[e]={id:e,exports:{}};try{var c={id:e,module:i,factory:r[e],require:o};o.i.forEach((function(e){e(c)})),i=c.module,c.factory.call(i.exports,i,i.exports,c.require)}catch(e){throw i.error=e,e}return i.exports}o.m=r,o.c=t,o.i=[],o.d=function(e,n){for(var r in n)o.o(n,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o.hu=function(e){return e+"."+o.h()+".hot-update.js"},o.miniCssF=function(e){},o.hmrF=function(){return"main."+o.h()+".hot-update.json"},o.h=function(){return"a46287e45ed1c5937df0"},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},e={},n="gameoflife:",o.l=function(r,t,i,c){if(e[r])e[r].push(t);else{var a,d;if(void 0!==i)for(var l=document.getElementsByTagName("script"),u=0;u<l.length;u++){var s=l[u];if(s.getAttribute("src")==r||s.getAttribute("data-webpack")==n+i){a=s;break}}a||(d=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",n+i),a.src=r),e[r]=[t];var f=function(n,t){a.onerror=a.onload=null,clearTimeout(p);var o=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((function(e){return e(t)})),n)return n(t)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),d&&document.head.appendChild(a)}},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){var e,n,r,t={},i=o.c,c=[],a=[],d="idle",l=0,u=[];function s(e){d=e;for(var n=[],r=0;r<a.length;r++)n[r]=a[r].call(null,e);return Promise.all(n)}function f(){0==--l&&s("ready").then((function(){if(0===l){var e=u;u=[];for(var n=0;n<e.length;n++)e[n]()}}))}function p(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return s("check").then(o.hmrM).then((function(r){return r?s("prepare").then((function(){var t=[];return n=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,i){return o.hmrC[i](r.c,r.r,r.m,e,n,t),e}),[])).then((function(){return n=function(){return e?v(e):s("ready").then((function(){return t}))},0===l?n():new Promise((function(e){u.push((function(){e(n())}))}));var n}))})):s(m()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+d+")")})):v(e)}function v(e){e=e||{},m();var t=n.map((function(n){return n(e)}));n=void 0;var o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return s("abort").then((function(){throw o[0]}));var i=s("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var c,a=s("apply"),d=function(e){c||(c=e)},l=[];return t.forEach((function(e){if(e.apply){var n=e.apply(d);if(n)for(var r=0;r<n.length;r++)l.push(n[r])}})),Promise.all([i,a]).then((function(){return c?s("fail").then((function(){throw c})):r?v(e).then((function(e){return l.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e})):s("idle").then((function(){return l}))}))}function m(){if(r)return n||(n=[]),Object.keys(o.hmrI).forEach((function(e){r.forEach((function(r){o.hmrI[e](r,n)}))})),r=void 0,!0}o.hmrD=t,o.i.push((function(u){var v,m,y,g,b=u.module,E=function(n,r){var t=i[r];if(!t)return n;var o=function(o){if(t.hot.active){if(i[o]){var a=i[o].parents;-1===a.indexOf(r)&&a.push(r)}else c=[r],e=o;-1===t.children.indexOf(o)&&t.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+r),c=[];return n(o)},a=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(r){n[e]=r}}};for(var u in n)Object.prototype.hasOwnProperty.call(n,u)&&"e"!==u&&Object.defineProperty(o,u,a(u));return o.e=function(e){return function(e){switch(d){case"ready":s("prepare");case"prepare":return l++,e.then(f,f),e;default:return e}}(n.e(e))},o}(u.require,u.id);b.hot=(v=u.id,m=b,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==v,_requireSelf:function(){c=m.parents.slice(),e=y?void 0:v,o(v)},active:!0,accept:function(e,n,r){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._acceptedDependencies[e[t]]=n||function(){},g._acceptedErrorHandlers[e[t]]=r;else g._acceptedDependencies[e]=n||function(){},g._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)g._declinedDependencies[e[n]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=g._disposeHandlers.indexOf(e);n>=0&&g._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":n=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](v,n)})),s("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](v,n)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(v)}},check:p,apply:h,status:function(e){if(!e)return d;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var n=a.indexOf(e);n>=0&&a.splice(n,1)},data:t[v]},e=void 0,g),b.parents=c,b.children=[],c=[],u.require=E})),o.hmrC={},o.hmrI={}}(),function(){var e;o.g.importScripts&&(e=o.g.location+"");var n=o.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var t=r.length-1;t>-1&&!e;)e=r[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e}(),function(){if("undefined"!=typeof document){var e=[],n=[],r=function(r){return{dispose:function(){for(var n=0;n<e.length;n++){var r=e[n];r.parentNode&&r.parentNode.removeChild(r)}e.length=0},apply:function(){for(var e=0;e<n.length;e++)n[e].rel="stylesheet";n.length=0}}};o.hmrC.miniCss=function(t,i,c,a,d,l){d.push(r),t.forEach((function(r){var t=o.miniCssF(r),i=o.p+t,c=function(e,n){for(var r=document.getElementsByTagName("link"),t=0;t<r.length;t++){var o=(c=r[t]).getAttribute("data-href")||c.getAttribute("href");if("stylesheet"===c.rel&&(o===e||o===n))return c}var i=document.getElementsByTagName("style");for(t=0;t<i.length;t++){var c;if((o=(c=i[t]).getAttribute("data-href"))===e||o===n)return c}}(t,i);c&&a.push(new Promise((function(t,o){var a=function(e,n,r,t,o){var i=document.createElement("link");return i.rel="stylesheet",i.type="text/css",i.onerror=i.onload=function(r){if(i.onerror=i.onload=null,"load"===r.type)t();else{var c=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.href||n,d=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=c,d.request=a,i.parentNode&&i.parentNode.removeChild(i),o(d)}},i.href=n,r?r.parentNode.insertBefore(i,r.nextSibling):document.head.appendChild(i),i}(r,i,c,(function(){a.as="style",a.rel="preload",t()}),o);e.push(c),n.push(a)})))}))}}}(),function(){var e,n,r,t,i,c=o.hmrS_jsonp=o.hmrS_jsonp||{179:0},a={};function d(n,r){return e=r,new Promise((function(e,r){a[n]=e;var t=o.p+o.hu(n),i=new Error;o.l(t,(function(e){if(a[n]){a[n]=void 0;var t=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+n+" failed.\n("+t+": "+o+")",i.name="ChunkLoadError",i.type=t,i.request=o,r(i)}}))}))}function l(e){function a(e){for(var n=[e],r={},t=n.map((function(e){return{chain:[e],id:e}}));t.length>0;){var i=t.pop(),c=i.id,a=i.chain,l=o.c[c];if(l&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:c};if(l.hot._main)return{type:"unaccepted",chain:a,moduleId:c};for(var u=0;u<l.parents.length;u++){var s=l.parents[u],f=o.c[s];if(f){if(f.hot._declinedDependencies[c])return{type:"declined",chain:a.concat([s]),moduleId:c,parentId:s};-1===n.indexOf(s)&&(f.hot._acceptedDependencies[c]?(r[s]||(r[s]=[]),d(r[s],[c])):(delete r[s],n.push(s),t.push({chain:a.concat([s]),id:s})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:r}}function d(e,n){for(var r=0;r<n.length;r++){var t=n[r];-1===e.indexOf(t)&&e.push(t)}}o.f&&delete o.f.jsonpHmr,n=void 0;var l={},u=[],s={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(o.o(r,p)){var h,v=r[p],m=!1,y=!1,g=!1,b="";switch((h=v?a(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":e.onAccepted&&e.onAccepted(h),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(p in s[p]=v,d(u,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,p)&&(l[p]||(l[p]=[]),d(l[p],h.outdatedDependencies[p]));g&&(d(u,[h.moduleId]),s[p]=f)}r=void 0;for(var E,w=[],_=0;_<u.length;_++){var I=u[_],S=o.c[I];S&&(S.hot._selfAccepted||S.hot._main)&&s[I]!==f&&!S.hot._selfInvalidated&&w.push({module:I,require:S.hot._requireSelf,errorHandler:S.hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete c[e]})),t=void 0;for(var n,r=u.slice();r.length>0;){var i=r.pop(),a=o.c[i];if(a){var d={},s=a.hot._disposeHandlers;for(_=0;_<s.length;_++)s[_].call(null,d);for(o.hmrD[i]=d,a.hot.active=!1,delete o.c[i],delete l[i],_=0;_<a.children.length;_++){var f=o.c[a.children[_]];f&&(e=f.parents.indexOf(i))>=0&&f.parents.splice(e,1)}}}for(var p in l)if(o.o(l,p)&&(a=o.c[p]))for(E=l[p],_=0;_<E.length;_++)n=E[_],(e=a.children.indexOf(n))>=0&&a.children.splice(e,1)},apply:function(n){for(var r in s)o.o(s,r)&&(o.m[r]=s[r]);for(var t=0;t<i.length;t++)i[t](o);for(var c in l)if(o.o(l,c)){var a=o.c[c];if(a){E=l[c];for(var d=[],f=[],p=[],h=0;h<E.length;h++){var v=E[h],m=a.hot._acceptedDependencies[v],y=a.hot._acceptedErrorHandlers[v];if(m){if(-1!==d.indexOf(m))continue;d.push(m),f.push(y),p.push(v)}}for(var g=0;g<d.length;g++)try{d[g].call(null,E)}catch(r){if("function"==typeof f[g])try{f[g](r,{moduleId:c,dependencyId:p[g]})}catch(t){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:c,dependencyId:p[g],error:t,originalError:r}),e.ignoreErrored||(n(t),n(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:c,dependencyId:p[g],error:r}),e.ignoreErrored||n(r)}}}for(var b=0;b<w.length;b++){var _=w[b],I=_.module;try{_.require(I)}catch(r){if("function"==typeof _.errorHandler)try{_.errorHandler(r,{moduleId:I,module:o.c[I]})}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:I,error:t,originalError:r}),e.ignoreErrored||(n(t),n(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:I,error:r}),e.ignoreErrored||n(r)}}return u}}}self.webpackHotUpdategameoflife=function(n,t,c){for(var d in t)o.o(t,d)&&(r[d]=t[d],e&&e.push(d));c&&i.push(c),a[n]&&(a[n](),a[n]=void 0)},o.hmrI.jsonp=function(e,n){r||(r={},i=[],t=[],n.push(l)),o.o(r,e)||(r[e]=o.m[e])},o.hmrC.jsonp=function(e,a,u,s,f,p){f.push(l),n={},t=a,r=u.reduce((function(e,n){return e[n]=!1,e}),{}),i=[],e.forEach((function(e){o.o(c,e)&&void 0!==c[e]?(s.push(d(e,p)),n[e]=!0):n[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,r){n&&o.o(n,e)&&!n[e]&&(r.push(d(e)),n[e]=!0)})},o.hmrM=function(){if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((function(e){if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}}(),o(809)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,